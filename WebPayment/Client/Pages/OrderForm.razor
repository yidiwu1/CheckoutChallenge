@page "/"
@inject IOrdersHttpClient OrderClient
@inject NavigationManager NavigationManager

@if (Order == null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="@Order" OnValidSubmit="@HandleValidSubmit">

    <div class="card border-radias-12">
        <div class="card-body p-3 bg-light">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="description">
                    Description
                </label>
                <InputText class="form-control" id="description" @bind-Value="Order.Description" />
            </div>
            <div class="form-group">
                <label for="amount">
                    Amount
                </label>
                <InputNumber class="form-control" id="amount" @bind-Value="Order.Amount" />
            </div>
            <div class="form-group">
                <label for="emailaddress">
                    Email address
                </label>
                <InputText class="form-control" id="emailaddress" @bind-Value="Order.EmailAddress" />
            </div>

            <button class="btn btn-darker btn-block btn-larger" type="submit">@(isNew ? "Pay order" : "Update order")</button>
        </div>
    </div>

   
</EditForm>
}
@code {
    [Parameter]
    public IOrder Order { get; set; }

    [Parameter]
    public EventCallback OnSaved { get; set; }
    [Parameter]
    public EventCallback<IOrder> OnCreated { get; set; }

    private bool isNew => Order.OrderID == 0;

    protected override void OnInitialized()
    {
        if (Order == null)
        {
            Order = new Order();
        }
    }

    private async void HandleValidSubmit()
    {
        if (isNew)
        {
            Order = await OrderClient.Create(Order);
            NavigationManager.NavigateTo($"payment?orderid={Order.OrderID}");
            await OnCreated.InvokeAsync(Order);
        }
        else
        {
            await OrderClient.Update(Order);
            await OnSaved.InvokeAsync();
        }
    }
}
